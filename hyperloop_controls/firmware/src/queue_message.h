#ifndef _QUEUE_MESSAGE_H
#define	_QUEUE_MESSAGE_H

// DOM-IGNORE-BEGIN
#ifdef	__cplusplus // Provide C++ Compatibility
extern "C" {
#endif
// DOM-IGNORE-END

typedef enum
{
    // Communication
    COMMUNICATION_READ = 0x00,
    COMMUNICATION_START_MESSAGE,
            
    // AHRS
    AHRS_READ,
    AHRS_DATA_MESSAGE,
    AHRS_START_MESSAGE,
            
    // Control
    CONTROL_DATA_MESSAGE,
    CONTROL_ALERT_MESSAGE,
            
    // I2C
    I2C_START_MESSAGE,
    I2C_DATA_MESSAGE,
            
    // EXTERNAL_INTERRUPTS
    PUSHER_STATE_MESSAGE,
    PHOTOELECTRIC_STATE_MESSAGE,
            
    // Error
    ERROR_MESSAGE,
} QUEUE_MESSAGE_TYPE;

typedef enum {
    ALERT_STARTUP_INIT,
    ALERT_I2C_READY,
    ALERT_AHRS_READY,
    ALERT_COMMUNICATION_READY,
    ALERT_CONTROL_READY,
    ALERT_START_FAILED_OUT_OF_BOUNDS,
    ALERT_START_REQUEST_CONFIRM,
    ALERT_POD_READY_TO_PUSH,
    ALERT_POD_ACCELERATING,
    ALERT_TIMER_FAILED_TO_START,
    ALERT_EMERGENCY_STOP_COMMAND_RECEIVED,
    ALERT_I2C_OUT_OF_BOUNDS,
    ALERT_MAX_BRAKING_DISTANCE_PASSED,
    ALERT_CONTROL_FAILED_TO_QUEUE,
    ALERT_MESSAGE_ACK_NOT_RECEIVED, 
    ALERT_SENSORS_NOT_UPDATED,
    ALERT_MAX_BRAKING_TIME_PASSED,
    ALERT_PHOTOELECTRIC_ERROR,
    ALERT_PUSHER_ERROR,
    ALERT_PUSH_STATE_CHANGE,
} ALERT_MESSAGE;
    
typedef struct
{
    QUEUE_MESSAGE_TYPE type;
    uint8_t size;
    uint8_t* data;
} QUEUE_MESSAGE;

#endif	/* _QUEUE_MESSAGE_H */

// DOM-IGNORE_BEGIN
#ifdef	__cplusplus
}
#endif
// DOM-IGNORE-END