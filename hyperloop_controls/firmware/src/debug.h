#ifndef DEBUG_H
#define	DEBUG_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdlib.h>
#include "system_config.h"
#include "system_definitions.h"
#include "communication.h"
#include "queue_message.h"

#ifdef	__cplusplus
extern "C" {
#endif
    
#define DEBUG_PORT_ENABLE true
    
typedef enum
{
    // Communication
    ERROR_COMMUNICATION_RECEIVE_MESSAGE = 0x00,
    ERROR_COMMUNICATION_CALLBACK = 0x00,
    ERROR_COMMUNICATION_READ = 0x00,
    ERROR_COMMUNICATION_READ_HEADER_1 = 0x00,
    ERROR_COMMUNICATION_READ_HEADER_2 = 0x00,
    ERROR_COMMUNICATION_READ_LENGTH = 0x00,
    ERROR_COMMUNICATION_READ_DATA = 0x00,
    ERROR_COMMUNICATION_QUEUE_NOT_CREATED = 0x00,
    ERROR_COMMUNICATION_FAILED_TO_QUEUE = 0x00,
    ERROR_COMMUNICATION_ERROR = 0x00,
            
    // Ahrs       
    ERROR_AHRS_RECEIVE_MESSAGE = 0x00,
    ERROR_AHRS_CALLBACK = 0x00,            
    ERROR_AHRS_QUEUE_NOT_CREATED = 0x00,
    ERROR_AHRS_FAILED_TO_QUEUE = 0x00,
    ERROR_AHRS_ERROR = 0x00,
            
    // Ahrs Read States
    ERROR_AHRS_READ = 0x00,
    ERROR_AHRS_READ_HEADER_1 = 0x01,
    ERROR_ARHS_READ_HEADER_2 = 0x02,
    ERROR_AHRS_READ_LENGTH = 0x03,
    ERROR_AHRS_READ_DATA = 0x04,
          
    // AHRS States
    ERROR_AHRS_STATE_INIT = 0x00,
    ERROR_AHRS_STATE_SEND_STOP = 0x00,
    ERROR_AHRS_STATE_SEND_START = 0x00,
    ERROR_AHRS_STATE_ACK_START = 0x00,
    ERROR_AHRS_STATE_WAIT_ALIGNMENT = 0x00,
    ERROR_ARHS_STATE_GET_ALIGNMENT = 0x00,
    ERROR_AHRS_STATE_SET_ALIGNMENT = 0x00,
    ERROR_AHRS_STATE_ACK_SET_PARAMS = 0x00,
    ERROR_AHRS_STATE_ACK_RESTART = 0x00,
    ERROR_AHRS_STATE_WAIT_UPDATED_ALIGNMENT = 0x00,
    ERROR_AHRS_STATE_CALCULATE_OFFSET = 0x00,
    ERROR_AHRS_STATE_RUN = 0x00,
    ERROR_AHRS_STATE_ERROR = 0x00,
            
    // Control Errors
    ERROR_CONTROL_RECEIVE_MESSAGE = 0x00,
    ERROR_CONTROL_MS_TIMER_NOT_STARTED = 0x00,
    ERROR_CONTROL_MESSAGE_TIMER_NOT_STARTED = 0x00,
    ERROR_CONTROL_DATA_MISSED_UPDATE = 0x00, 
    ERROR_CONTROL_MISSED_MESSAGE_ACK = 0x00,
    ERROR_CONTROL_QUEUE_NOT_CREATED = 0x00,
    ERROR_CONTROL_FAILED_TO_QUEUE = 0x00,
    ERROR_CONTROL_ERROR = 0x00,
       
    // Control States
    ERROR_CONTROL_STATE_INIT = 0x00,
    ERROR_CONTROL_STATE_WAIT_STARTUP = 0x00,
    ERROR_CONTROL_STATE_IDLE = 0x00,
    ERROR_CONTROL_STATE_CONFIRM_START = 0x00,
    ERROR_CONTROL_STATE_CHECK_START = 0x00,
    ERROR_CONTROL_STATE_START_IDLE = 0x00,
    ERROR_CONTROL_STATE_ACCELERATION = 0x00,
    ERROR_CONTROL_STATE_PROPULSION = 0x00,
    ERROR_CONTROL_STATE_COAST = 0x00,
    ERROR_CONTROL_STATE_BRAKING = 0x00,
    ERROR_CONTROL_STATE_POST_IDLE = 0x00,
    ERROR_CONTROL_STATE_EMERGENCY_STOP_ENTERANCE = 0x00,
    ERROR_CONTROL_STATE_EMERGENCY_WAIT_PUSHER_DISCONNECT = 0x00,
    ERROR_CONTROL_STATE_EMERGENCY_BRAKING = 0x00,
    ERROR_CONTROL_STATE_EMERGENCY_IDLE = 0x00,
    ERROR_CONTROL_STATE_ERROR = 0x00,
            
    // I2C
    ERROR_I2C_RECEIVE_MESSAGE = 0x00,
    ERROR_I2C_TIMER_NOT_STARTED = 0x00,
    ERROR_I2C_BUFFER_ERROR = 0x0,
    ERROR_I2C_QUEUE_NOT_CREATED = 0x00,
    ERROR_I2C_FAILED_TO_QUEUE = 0x00,
    ERROR_I2C_ERROR = 0x00,
            
    // External Interrupts
    ERROR_EXTERNAL_INT_0 = 0x00,
    ERROR_EXTERNAL_INT_1 = 0x00,
    ERROR_EXTERNAL_INT_2 = 0x00,
    ERROR_EXTERNAL_INT_3 = 0x00,
    ERROR_EXTERNAL_INT_CLEARED = 0x00,
            
    // General
    ERROR_GENERAL = 0x00,
} ERROR_CODE;

void DEBUG_Initialize(void);
void DEBUG_MESSAGE(ERROR_CODE);
void DEBUG_NEW_MESSAGE(char);

#ifdef	__cplusplus
}
#endif

#endif	/* DEBUG_H */

